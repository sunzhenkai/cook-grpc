load("@rules_proto//proto:defs.bzl", "proto_library")
## for stack rules
# load("@build_stack_rules_proto//cpp:cpp_proto_library.bzl", "cpp_proto_library")
# load("@build_stack_rules_proto//java:java_proto_library.bzl", "java_proto_library")
# load("@build_stack_rules_proto//java:java_grpc_library.bzl", "java_grpc_library")
# load("@build_stack_rules_proto//python:python_proto_library.bzl", "python_proto_library")
# load("@build_stack_rules_proto//python:python_grpc_library.bzl", "python_grpc_library")

load(
    "@com_google_googleapis_imports//:imports.bzl",
    "java_gapic_assembly_gradle_pkg",   
    "java_gapic_library",
    "java_gapic_test",
    "java_grpc_library",
    "java_proto_library",
    # "python_grpc_library",
)


# cpp_proto_library(
#     name = "cpp_person_proto",
#     deps = [":person_proto"],
# )

## Java
java_proto_library(
    name = "java_person_proto",
    deps = [":person_proto"],
)

java_grpc_library(
    name = "java_person_grpc",
    srcs = [":person_proto"],
    deps = [":java_person_proto"],
)

java_gapic_library(
    name = "java_person_gapic",
    srcs = [":person_proto"],
    gapic_yaml = "person_gapic.yaml",
    grpc_service_config = "person_grpc_service_config.json",
    deps = [
        ":java_person_proto",
    ],
)

java_gapic_assembly_gradle_pkg(
    name = "cook-grpc-apis-person-v1-java",
    deps = [
        ":java_person_gapic",
        ":java_person_grpc",
        ":java_person_proto",
        ":person_proto",
    ],
)

## Python
# python_grpc_library(
#     name = "python_person_grpc",
#     deps = [":person_proto"],
# )

proto_library(
    name = "person_proto",
    srcs = ["person.proto"],
    deps = [
        "@google_api_common_protos//:annotations_proto",
        "@google_api_common_protos//:client_proto",
        "@google_api_common_protos//:field_behavior_proto",
        "@google_api_common_protos//:resource_proto",
        "@com_google_protobuf//:empty_proto",
        "@com_google_protobuf//:field_mask_proto",
        "@com_google_protobuf//:any_proto",
    ],
)